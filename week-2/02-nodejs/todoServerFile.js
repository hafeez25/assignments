/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");
const fs = require("fs");
const { v4: uuidv4 } = require("uuid");
const todos = require("./todos.json");
const app = express();
app.use(bodyParser.json());

function findIndex(arr, id) {
  console.log(id);
  for (let i = 0; i < arr.length; i++) {
    if (arr[i]._id === id) return i;
  }
  return -1;
}

function removeAtIndex(arr, index) {
  let newArray = [];
  for (let i = 0; i < arr.length; i++) {
    if (i !== index) newArray.push(arr[i]);
  }
  return newArray;
}

// 1 - Retrive all todos from file
app.get("/todos", (req, res) => {
  res.status(200);
  res.json(todos);
});

// 2- return specific todo
app.get("/todos/:id", (req, res) => {
  const { id } = req.params;
  const data = fs.readFileSync("todos.json", "utf-8");
  const jsonData = JSON.parse(data);
  const isFound = findIndex(jsonData, id);
  if (isFound != -1) {
    res.status(200);
    res.json(jsonData[isFound]);
  } else {
    res.status(404);
    res.json("Items not found!");
  }
});

// 3 - Create todo item
app.post("/todos", async (req, res) => {
  const { title, completed, description } = req.body;
  const data = fs.readFileSync("todos.json");
  const jsonData = JSON.parse(data);

  const task = {
    _id: uuidv4(),
    title,
    completed,
    description,
  };
  jsonData.push(task);

  fs.writeFileSync("todos.json", JSON.stringify(jsonData), (err) => {
    if (err) {
      res.status(401);
      res.json({ message: "Something went wrong" });
      return;
    }
  });
  res.status(201);
  res.json(task);
});

// 4- - update task in json file
app.put("/todos/:id", (req, res) => {
  const { id } = req.params;
  const { title, completed, description } = req.body;
  const data = fs.readFileSync("todos.json", "utf-8");
  const jsonData = JSON.parse(data);
  const index = findIndex(jsonData, id);
  if (index == -1) {
    res.status(404);
    res.json("Task not found!");
  } else {
    const updateData = {
      _id: jsonData[index]._id,
      title: title ? title : jsonData[index].title,
      completed: completed ? completed : jsonData[index].completed,
      description: description ? description : jsonData[index].description,
    };

    jsonData[index] = updateData;
    fs.writeFile("todos.json", JSON.stringify(jsonData), (err) => {
      if (err) throw Error;
      console.log("hel");
      res.status(201);
      res.json(updateData);
    });
  }
});

app.delete("/todos/:id", async (req, res) => {
  const { id } = req.params;
  const data = await fs.readFileSync("todos.json");
  const jsonData = JSON.parse(data);
  const index = findIndex(jsonData, id);
  console.log(index);
  if (index == -1) {
    res.status(404);
    res.send();
  } else {
    const updateData = removeAtIndex(jsonData, index);

    fs.writeFile("todos.json", JSON.stringify(updateData), (err) => {
      if (err) {
        throw err;
      }
      res.status(200);
      res.send();
    });
  }
});

const port = 3000;
app.listen(port, () => {
  console.log(`server started on PORT ${port}`);
});

module.exports = app;
